name: Build AthenaOS ARM64 ISO

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: ''

env:
  FEDORA_VERSION: 40
  ISO_NAME: athenaos-arm64

jobs:
  build-arm64-iso:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker
      run: |
        brew install docker
        colima start --arch aarch64 --vm-type=vz --vz-rosetta
        
    - name: Verify ARM64 architecture
      run: |
        echo "Host architecture: $(uname -m)"
        docker run --rm alpine:latest uname -m
        
    - name: Set version variables
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.release_version }}" ]]; then
          VERSION="${{ github.event.inputs.release_version }}"
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${{ github.ref_name }}"
        else
          VERSION="$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-7)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "iso_filename=${ISO_NAME}-${VERSION}.iso" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: Create build container
      run: |
        cat << 'EOF' > Dockerfile
        FROM fedora:${{ env.FEDORA_VERSION }}
        
        # Install required packages for building live media
        RUN dnf update -y && \
            dnf install -y \
                lorax \
                anaconda \
                anaconda-tui \
                livemedia-creator \
                pykickstart \
                python3-pylorax \
                systemd \
                glibc-all-langpacks \
                qemu-kvm \
                libvirt \
                virt-install \
                libguestfs-tools \
                xorriso \
                syslinux \
                git \
                wget \
                curl && \
            dnf clean all
            
        # Set up working directory
        WORKDIR /workspace
        
        # Copy kickstart and configuration files
        COPY . .
        
        # Make sure src files are in the right place
        RUN mkdir -p /etc/pacman.d && \
            cp src/athena-mirrorlist /etc/pacman.d/ && \
            cp src/pacman.conf /etc/pacman.conf && \
            cp src/*.gpg /etc/pacman.d/ && \
            cp src/*-trusted /etc/pacman.d/ && \
            cp src/*-revoked /etc/pacman.d/
            
        VOLUME ["/output"]
        EOF
        
        docker build -t athenaos-builder .
        
    - name: Build ARM64 ISO
      run: |
        mkdir -p ./output
        
        # Create the build script
        cat << 'EOF' > build-iso.sh
        #!/bin/bash
        set -e
        
        echo "Starting AthenaOS ARM64 ISO build..."
        echo "Fedora version: ${{ env.FEDORA_VERSION }}"
        echo "Target architecture: aarch64"
        
        # Create output directory
        mkdir -p /output
        
        # Verify kickstart file
        if ! pykickstart --version F${{ env.FEDORA_VERSION }} athena-iso.ks; then
            echo "ERROR: Kickstart file validation failed"
            exit 1
        fi
        
        # Build the ISO using livemedia-creator
        echo "Building live media..."
        livemedia-creator \
            --ks athena-iso.ks \
            --no-virt \
            --resultdir /output \
            --project "AthenaOS ARM64" \
            --make-iso \
            --volid "AthenaOS-ARM64" \
            --iso-only \
            --iso-name "${{ steps.version.outputs.iso_filename }}" \
            --releasever ${{ env.FEDORA_VERSION }} \
            --title "AthenaOS ARM64" \
            --logfile /output/build.log \
            --timeout 7200
            
        # Verify the ISO was created
        if [ -f "/output/${{ steps.version.outputs.iso_filename }}" ]; then
            echo "ISO build successful!"
            ls -lh /output/
            echo "ISO size: $(du -h /output/${{ steps.version.outputs.iso_filename }} | cut -f1)"
        else
            echo "ERROR: ISO build failed"
            echo "Build log:"
            cat /output/build.log || echo "No build log found"
            exit 1
        fi
        EOF
        
        chmod +x build-iso.sh
        
        # Run the build in container
        docker run --rm \
            --platform linux/arm64 \
            -v "$(pwd)":/workspace \
            -v "$(pwd)/output":/output \
            --privileged \
            athenaos-builder \
            /workspace/build-iso.sh
            
    - name: Verify ISO build
      run: |
        if [ -f "./output/${{ steps.version.outputs.iso_filename }}" ]; then
          echo "‚úÖ ISO build successful!"
          echo "üìÅ ISO location: ./output/${{ steps.version.outputs.iso_filename }}"
          echo "üìä ISO size: $(du -h ./output/${{ steps.version.outputs.iso_filename }} | cut -f1)"
          echo "üîç ISO details:"
          file "./output/${{ steps.version.outputs.iso_filename }}"
        else
          echo "‚ùå ISO build failed!"
          echo "üìã Available files in output:"
          ls -la ./output/ || echo "No output directory"
          echo "üìú Build log:"
          cat ./output/build.log 2>/dev/null || echo "No build log available"
          exit 1
        fi
        
    - name: Generate checksums
      run: |
        cd output
        sha256sum "${{ steps.version.outputs.iso_filename }}" > "${{ steps.version.outputs.iso_filename }}.sha256"
        md5sum "${{ steps.version.outputs.iso_filename }}" > "${{ steps.version.outputs.iso_filename }}.md5"
        
    - name: Upload ISO artifact
      uses: actions/upload-artifact@v4
      with:
        name: athenaos-arm64-iso-${{ steps.version.outputs.version }}
        path: |
          output/${{ steps.version.outputs.iso_filename }}
          output/${{ steps.version.outputs.iso_filename }}.sha256
          output/${{ steps.version.outputs.iso_filename }}.md5
          output/build.log
        retention-days: 30
        
    - name: Create Release
      if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: AthenaOS ARM64 ${{ steps.version.outputs.version }}
        body: |
          # AthenaOS ARM64 Release ${{ steps.version.outputs.version }}
          
          This is an automated build of AthenaOS for ARM64 architecture.
          
          ## üèóÔ∏è Build Information
          - **Architecture**: ARM64 (aarch64)
          - **Base**: Fedora ${{ env.FEDORA_VERSION }}
          - **Build Date**: ${{ github.run_id }}
          - **Commit**: ${{ github.sha }}
          
          ## üì• Download
          - **ISO File**: `${{ steps.version.outputs.iso_filename }}`
          - **SHA256**: `${{ steps.version.outputs.iso_filename }}.sha256`
          - **MD5**: `${{ steps.version.outputs.iso_filename }}.md5`
          
          ## ‚ö†Ô∏è Important Notes
          - This is an experimental ARM64 build
          - Test thoroughly before production use
          - Report issues on the GitHub repository
          
          ## üöÄ Installation
          1. Download the ISO file
          2. Verify checksums
          3. Flash to USB or burn to DVD
          4. Boot on ARM64 device
          
        files: |
          output/${{ steps.version.outputs.iso_filename }}
          output/${{ steps.version.outputs.iso_filename }}.sha256
          output/${{ steps.version.outputs.iso_filename }}.md5
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
